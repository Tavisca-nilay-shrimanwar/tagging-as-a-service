name: Cassandra rrrrrrrrr-55555555555 cassandra restore workflow 

on:
  workflow_dispatch:
    inputs:
      cassandra_restore_method:
        type: choice
        description: 'Cassandra restore method'     
        required: true
        default: "ManualLatest"
        options:
        - ManualLatest  
        - Manual
      backup_id:
        required: false
        description: "Backup id for cassandra (required if 'Manual' is selected as Restore Method )"
        type: string
      restore_scope:
        type: choice
        description: 'Restore Scope'     
        required: true
        default: "All"
        options:
        - All  
        - Keyspace
        - Table
      keyspaces:
        type: string
        required: false
        description: "Provide keyspaces names (required only if Restore scope is selected as 'Keyspace' or 'Table')"
      table:
        type: string
        required: false
        description: "Provide table name (required only if Restore scope is selected as 'Table')"
      retention_days:
        required: true
        description: "Provide number of days between 1 and 7 for retaining restored cluster. Providing 0 keeps cluster forever."
        default: 1
      environment:
        type: choice
        description: 'Choose from below environments'     
        required: true
        default: "poc"
        options:
        - poc
        - qa
        - stage
        - prod

    schedule:
      - cron:  '0 4 * * *'

env:
  SSL_CERT_DIR: "/etc/pki/tls/certs"
  ClusterNameForBackup: "rrrrrrrrr-55555555555"
  DbType: "cassandra"
  aws_account: "CX.TRAVEL.POC.APPDR"
  RegionName: "us-east-1"
  BackupRetentionPeriod: "30"

jobs:
    validation:
        name: Validating the inputs
        runs-on:
          - CX.TRAVEL.POC.APPDR
        steps:   
          - name: Check retention days input
            if: inputs.retention_days < 0 || inputs.retention_days > 7
            run: |
              echo "The input retention_days can only be between 0 and 7. Invalid input provided"
              exit 1
          - name: Check required input for ondemand manual restore 
            if: inputs.cassandra_restore_method == 'Manual' && inputs.backup_id == ''
            run: |
              echo "The input backup_id cannot be empty for Restore Method selected as 'Manual'"
              exit 1
          - name: Check required input for restore scope if restore scope is keyspaces or table
            if: (inputs.restore_scope == 'Keyspace' || inputs.restore_scope == 'Table') && inputs.keyspaces == ''
            run: |
              echo "The input keyspaces cannot be empty for Restore Scope selected as 'Keyspace' or 'Table'"
              exit 1
          - name: Check required input for restore scope if restore scope is keyspaces or table
            if: inputs.restore_scope == 'Table' && inputs.table == ''
            run: |
              echo "The input table cannot be empty for Restore Scope selected as 'Table'"
              exit 1

    run-restore-ondemand-latest:
        name: restore-ondemand-manual-latest
        needs: validation
        if: github.event_name == 'workflow_dispatch' && inputs.cassandra_restore_method == 'ManualLatest'
        env:
          CassandraClusterRestoreMethod: "ManualLatest"
          BackupId: ${{ inputs.backup_id }}
          RestoreScope: ${{ inputs.restore_scope }}
          Keyspaces: ${{ inputs.keyspaces }}
          TableName: ${{ inputs.table }}
        runs-on:
          - CX.TRAVEL.POC.APPDR
        steps:
          - name: Checkout code
            uses: actions/checkout@v3
          - name: Setup Python
            uses: actions/setup-python@v4
            with:
                python-version: 'pypy3.9'
          - run: pip3 install -r requirements.txt
          - name: Restore Cassandra Cluster
            id: restore_step
            working-directory: ./Opscenter/src/restore
            run: python manual_run.py
          - name: Generate retention config
            if: inputs.retention_days > 0 
            env:
              ClusterRetention: ${{ inputs.retention_days }}
              TargetClusterName: ${{ steps.restore_step.outputs.TargetClusterName }}
            working-directory: ./Opscenter/src/restore
            run: python write_retention_config.py

    run-restore-ondemand-manual:
        name: restore-ondemand-manual
        needs: validation
        if: github.event_name == 'workflow_dispatch' && inputs.cassandra_restore_method == 'Manual' && inputs.backup_id != ''
        env:
          CassandraClusterRestoreMethod: "Manual"
          BackupId: ${{ inputs.backup_id }}
          RestoreScope: ${{ inputs.restore_scope }}
          Keyspaces: ${{ inputs.keyspaces }}
          TableName: ${{ inputs.table }}

        runs-on:
          - CX.TRAVEL.POC.APPDR
        steps:
          - name: Checkout code
            uses: actions/checkout@v3
          - name: Setup Python
            uses: actions/setup-python@v4
            with:
                python-version: 'pypy3.9'
          - run: pip3 install -r requirements.txt
          - name: Restore Cassandra cluster
            id: restore_step
            working-directory: ./Opscenter/src/restore
            run: python manual_run.py
          - name: Generate retention config
            if: inputs.retention_days > 0 
            env:
              ClusterRetention: ${{ inputs.retention_days }}
              TargetClusterName: ${{ steps.restore_step.outputs.TargetClusterName }}
            working-directory: ./Opscenter/src/restore
            run: python write_retention_config.py

    run-restore-scheduled:
        name: restore-scheduled
        if: github.event_name != 'workflow_dispatch'
        runs-on:
          - CX.TRAVEL.POC.APPDR
        steps:
          - name: Checkout code
            uses: actions/checkout@v3
          - name: Setup Python
            uses: actions/setup-python@v4
            with:
              python-version: 'pypy3.9'
          - run: pip3 install -r requirements.txt
          - name: Restore Cassandra cluster
            id: restore_step
            working-directory: ./Opscenter/src/restore
            run: python schedule_run.py
          - name: Generate retention config
            env:
              TargetClusterName: ${{ steps.restore_step.outputs.TargetClusterName }}
            working-directory: ./Opscenter/src/restore
            run: python write_retention_config.py
