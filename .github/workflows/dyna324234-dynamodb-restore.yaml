name: dyna324234 dynamodb restore workflow 

on:
  workflow_dispatch:
    inputs:
      dynamodb_restore_method:
        type: choice
        description: 'Choose the restore method to be used for dynamodb restore'     
        required: true
        default: "ManualLatest"
        options:
        - ManualLatest  
        - Manual
        - Pitrdate
        - PitrLatest
      backup_arn:
        required: false
        description: "Backup arn eg: arn:aws:dynamodb:us-east-1:<account no>:table/<table-name>/backup/01683010854615-158e6c1b (required if 'Manual' is selected as Restore Method )"
        type: string
      pitr_backup_date:
        required: false
        description: "Backup date eg: 2023-05-03::13:36[YYYY-MM-DD::HH:MM] (required if 'Pitrdate' is selected as Restore Method )"
        type: string
      restored_table_retention_days:
        required: true
        description: "Provide number of days between 1 and 7 for retaining restored table. Providing 0 keeps table forever."
        default: 1

  schedule:
    - cron:  '0 4 * * *'

env:
  SSL_CERT_DIR: "/etc/pki/tls/certs"
  TableNameForBackup: "dyna324234"
  DBType: "dynamodb"
  aws_account: "CX.TRAVEL.POC.APPDR"
  RegionName: "us-east-1"
  TableRetention: 1

jobs:

    hoist:
        name: checks and validation
        runs-on:
          - CX.TRAVEL.POC.APPDR
        steps:   
          - name: Check retention days input
            if: github.event.inputs.restored_table_retention_days < 0 || github.event.inputs.restored_table_retention_days > 7
            run: |
              echo "The input restored_table_retention_days can only be between 0 and 7. Invalid input provided"
              exit 1
          - name: Check required input for ondemand manual restore
            if: github.event.inputs.dynamodb_restore_method == 'Manual' && github.event.inputs.backup_arn == ''
            run: |
              echo "The input backup_arn cannot be empty for Restore Method selected as 'Manual'"
              exit 1
          - name: Check required input for ondemand pitr restore
            if: github.event.inputs.dynamodb_restore_method == 'Pitrdate' && github.event.inputs.pitr_backup_date == ''
            run: |
              echo "The input pitr_backup_date cannot be empty for Restore Method selected as 'Pitrdate'"
              exit 1

    run-restore-ondemand-latest:
        name: restore-ondemand-manual-latest
        needs: hoist
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dynamodb_restore_method == 'ManualLatest'
        env:
          DynamoDBRestoreMethod: "ManualLatest"
        runs-on:
          - CX.TRAVEL.POC.APPDR
        steps:

          - name: Checkout code
            uses: actions/checkout@v3
            
          - name: Setup Python
            uses: actions/setup-python@v4
            with:
                python-version: 'pypy3.9'
            
          - run: pip3 install -r requirements.txt
              
          - name: Restore Dynamodb
            id: restore_step
            working-directory: ./DynamoDB/src/restore
            run: python manual_run.py

          - name: Generate retention config
            if: github.event.inputs.restored_table_retention_days > 0 
            env:
              TableRetention: ${{ github.event.inputs.restored_table_retention_days }}
              TargetTableName: ${{ steps.restore_step.outputs.TargetTableName }}
            working-directory: ./DynamoDB/src/restore
            run: python write_retention_config.py

    run-restore-ondemand-manual:
        name: restore-ondemand-manual
        needs: hoist
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dynamodb_restore_method == 'Manual' && github.event.inputs.backup_arn != ''
        env:
          DynamoDBRestoreMethod: "Manual"
          BackupArn: ${{ github.event.inputs.backup_arn }}
        runs-on:
          - CX.TRAVEL.POC.APPDR
        steps:

          - name: Checkout code
            uses: actions/checkout@v3
            
          - name: Setup Python
            uses: actions/setup-python@v4
            with:
                python-version: 'pypy3.9'
            
          - run: pip3 install -r requirements.txt
              
          - name: Restore Dynamodb
            id: restore_step
            working-directory: ./DynamoDB/src/restore
            run: python manual_run.py

          - name: Generate retention config
            if: github.event.inputs.restored_table_retention_days > 0 
            env:
              TableRetention: ${{ github.event.inputs.restored_table_retention_days }}
              TargetTableName: ${{ steps.restore_step.outputs.TargetTableName }}
            working-directory: ./DynamoDB/src/restore
            run: python write_retention_config.py

    run-restore-ondemand-pitrdate:
        name: restore-ondemand-pitrdate
        needs: hoist
        runs-on:
          - CX.TRAVEL.POC.APPDR
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dynamodb_restore_method == 'Pitrdate' && github.event.inputs.pitr_backup_date != ''
        env:
          DynamoDBRestoreMethod: "Pitrdate"
          PITRBackupDate: ${{ github.event.inputs.pitr_backup_date }}
        steps:

          - name: Checkout code
            uses: actions/checkout@v3
            
          - name: Setup Python
            uses: actions/setup-python@v4
            with:
                python-version: 'pypy3.9'
            
          - run: pip3 install -r requirements.txt

          - name: Restore Dynamodb
            id: restore_step
            working-directory: ./DynamoDB/src/restore
            run: python manual_run.py

          - name: Generate retention config
            if: github.event.inputs.restored_table_retention_days > 0
            env:
              TableRetention: ${{ github.event.inputs.restored_table_retention_days }}
              TargetTableName: ${{ steps.restore_step.outputs.TargetTableName }}
            working-directory: ./DynamoDB/src/restore
            run: python write_retention_config.py

    run-restore-ondemand-pitr:
        name: restore-ondemand-pitr
        needs: hoist
        runs-on:
          - CX.TRAVEL.POC.APPDR
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dynamodb_restore_method == 'PitrLatest'
        env:
          DynamoDBRestoreMethod: "Pitr"
        steps:

          - name: Checkout code
            uses: actions/checkout@v3
            
          - name: Setup Python
            uses: actions/setup-python@v4
            with:
                python-version: 'pypy3.9'
            
          - run: pip3 install -r requirements.txt
                
          - name: Restore Dynamodb
            id: restore_step
            working-directory: ./DynamoDB/src/restore
            run: python manual_run.py

          - name: Generate retention config
            if: github.event.inputs.restored_table_retention_days > 0
            env:
              TableRetention: ${{ github.event.inputs.restored_table_retention_days }}
              TargetTableName: ${{ steps.restore_step.outputs.TargetTableName }}
            working-directory: ./DynamoDB/src/restore
            run: python write_retention_config.py

    run-restore-scheduled:
        name: restore-scheduled
        if: github.event_name != 'workflow_dispatch'
        runs-on:
          - CX.TRAVEL.POC.APPDR
        steps:
          - name: Checkout code
            uses: actions/checkout@v3
          
          - name: Setup Python
            uses: actions/setup-python@v4
            with:
              python-version: 'pypy3.9'
          
          - run: pip3 install -r requirements.txt
                
          - name: Restore Dynamodb
            id: restore_step
            working-directory: ./DynamoDB/src/restore
            run: python schedule_run.py

          - name: Cleanup Infra
            env:
              TargetTableName: ${{ steps.restore_step.outputs.TargetTableName }}
            working-directory: ./DynamoDB/src/restore
            run: python delete_table_post_scheduled_restore.py